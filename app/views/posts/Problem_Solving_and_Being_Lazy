<div class="container">
  <div class="row">
      <h3>Problem Solving and Being Lazy</h>
          <p>One of the key fundamentals (arguably the predominant one) of solving a problem or approaching a task is to break it down into a set or collection of smaller – and therefore simpler and more manageable – tasks. The breakdown of these tasks does not need to possess mathematical or software-based parameters – one of the most important elements might be investigating the nature of the subject of the task - i.e. what is it? The breakdown can also result from questions such as ‘Who is the client?’, ‘What is the format?’, ‘To what extent is optimization necessary for its purpose?’. If the justification for the breaking down of the task isn’t self-evident, we only need to observe how much of a part it plays in everyday life – be it in the completion of an essay, in the preparing for competing in a marathon, in preparing a meal- to see how logical it is to take such an approach to software engineering. </p>
              The phrase ‘being lazy’ is often associated with cutting corners, incompleteness, and inefficiency – among other unideal qualities – that the idea of endorsing this in the context of software engineering might seem horrifying. Here it relates to finding a way of doing the most work, of the highest quality, in the shortest period of time. This might mean refusing to spend hours of precious time optimizing code when its benefits will not be experienced by the user, or obtaining the code from elsewhere if it already exists instead of writing it out yourself and thereby redoing a task that has essentially been done.</p>
  </div>
</div>
